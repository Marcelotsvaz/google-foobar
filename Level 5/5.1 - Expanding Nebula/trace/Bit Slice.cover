>>>>>> from typing import Self
>>>>>> from collections import Counter, defaultdict
>>>>>> from itertools import chain
       
       
       
>>>>>> GridAsLists = list[list[bool]]
       
       
       
>>>>>> class Grid:
>>>>>>         def __init__( self, gridAsInt: int, width: int, height: int ) -> None:
18127349:                 self.width = width
18127349:                 self.height = height
18127349:                 self.gridAsInt = gridAsInt
               
               
>>>>>>         def __eq__( self, value: Self ) -> bool:
30527896:                 return self.width == value.width and self.height == value.height and self.gridAsInt == value.gridAsInt
               
               
>>>>>>         def __hash__( self ) -> int:
32835244:                 return hash( self.gridAsInt )
               
               
>>>>>>         def __getitem__( self, key: tuple[int, int] ) -> bool:
218814450:                 return bool( self.gridAsInt & 1 << self.height * key[0] + key[1] )
               
               
>>>>>>         def __setitem__( self, key, value: tuple[int, int] ) -> None:
218814900:                 if value:
140266300:                         self.gridAsInt |= 1 << self.height * key[0] + key[1]
                       # else:
                       #       self.gridAsInt |= 1 << self.width * key[1] + key[0]
               
               
>>>>>>         @classmethod
>>>>>>         def fromLists( cls, gridAsLists: GridAsLists ) -> Self:
    1:                 width = len( gridAsLists[0] )
    1:                 height = len( gridAsLists )
                       
                       # Convert to integer representation.
    1:                 grid = cls( 0, width, height )
   10:                 for y in range( height ):
  459:                         for x in range( width ):
  450:                                 grid[x, y] = gridAsLists[y][x]
                       
    1:                 return grid
               
               
>>>>>>         def singleCellSolutions( self ) -> list[Self]:
                       '''
                       
                       '''
                       
  450:                 if self.gridAsInt == 0:
  450:                         solutions = [ 0, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15 ]
                       else:
>>>>>>                         solutions = [ 1, 2, 4, 8 ]
                       
 6300:                 return [ self.__class__( gridAsInt, 2, 2 ) for gridAsInt in solutions ]
               
               
>>>>>>         def sliceVertical( self, x: int ) -> Self:
12033698:                 bitMask = 2 ** self.height - 1
12033698:                 offset = x * self.height
                       
12033698:                 gridAsInt = self.gridAsInt >> offset & bitMask
                       
12033698:                 return self.__class__( gridAsInt, 1, self.height )
               
               
>>>>>>         def sliceHorizontal( self, y: int ) -> Self:
10650:                 gridSlice = self.__class__( 0, self.width, 1 )
                       
31500:                 for x in range( self.width ):
20850:                         gridSlice[x, 0] = self[x, y]
                       
10650:                 return gridSlice
               
               
>>>>>>         def columnSolutions( self, x: int ) -> list[Self]:
   50:                 column = self.sliceVertical( x )
  550:                 cells = [ column.sliceHorizontal( y ) for y in range( self.height ) ]
                       
   50:                 solutionsByKey = defaultdict( list )
  650:                 for cellSolution in cells[0].singleCellSolutions():
  600:                         bottom = cellSolution.sliceHorizontal( 1 )
  600:                         solutionsByKey[bottom].append( [ cellSolution ] )
                       
  450:                 for cell in cells[1:]:
  400:                         nextSolutionsByKey = defaultdict( list )
                               
 5200:                         for cellSolution in cell.singleCellSolutions():
 4800:                                 top = cellSolution.sliceHorizontal( 0 )
 4800:                                 bottom = cellSolution.sliceHorizontal( 1 )
                                       
 4800:                                 if top in solutionsByKey:
8882300:                                         for columnSolution in solutionsByKey[top]:
8877500:                                                 newColumnSolution = columnSolution[:]
8877500:                                                 newColumnSolution.append( cellSolution )
8877500:                                                 nextSolutionsByKey[bottom].append( newColumnSolution )
                               
  400:                         solutionsByKey = nextSolutionsByKey
                       
   50:                 newColumnSolutions = []
6077650:                 for columnSolution in chain.from_iterable( solutionsByKey.values() ):
6077600:                         newColumnSolution = self.__class__( 0, 2, self.height + 1 )
                               
60776000:                         for y, cellSolution in enumerate( columnSolution ):
54698400:                                 newColumnSolution[0, y] = cellSolution[0, 0]
54698400:                                 newColumnSolution[1, y] = cellSolution[1, 0]
                                       
54698400:                                 newColumnSolution[0, y + 1] = cellSolution[0, 1]
54698400:                                 newColumnSolution[1, y + 1] = cellSolution[1, 1]
                               
6077600:                         newColumnSolutions.append( newColumnSolution )
                       
   50:                 return newColumnSolutions
               
               
>>>>>>         def solve( self ) -> int:
   52:                 columnSolutions = ( self.columnSolutions( x ) for x in range( self.width ) )
                       
121554:                 solutionCounter = Counter( solution.sliceVertical( 1 ) for solution in next( columnSolutions ) )
   50:                 for solutions in columnSolutions:
   49:                         newSolutionCounter = Counter()
                               
5956097:                         for solution in solutions:
5956048:                                 left = solution.sliceVertical( 0 )
5956048:                                 right = solution.sliceVertical( 1 )
                                       
5956048:                                 if left in solutionCounter:
5956048:                                         newSolutionCounter[right] += solutionCounter[left]
                               
   49:                         solutionCounter = newSolutionCounter
                       
    1:                 return solutionCounter.total()
       
       
       
>>>>>> t4 = [
>>>>>>         [
>>>>>>                 [
>>>>>>                         False
>>>>>>                         for _ in range( 50 )
                       ]
>>>>>>                 for _ in range( 9 )
               ],
>>>>>>         342015522530891220930318205106520120995761507496882358868830383880718255659276117597645436150624945088901216664965365050,
       ]
       
       
       
>>>>>> import sys
>>>>>> import trace
>>>>>> tracer = trace.Trace(
>>>>>>         ignoredirs = [ sys.prefix, sys.exec_prefix ],
>>>>>>         trace = 0,
>>>>>>         count = 1,
       )
>>>>>> tracer.run( 'Grid.fromLists( t4[0] ).solve()' )
>>>>>> r = tracer.results()
>>>>>> r.write_results( show_missing = True, coverdir = '.' )
